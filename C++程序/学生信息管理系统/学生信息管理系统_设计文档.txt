目   录
第一章	设计内容与目标
本软件将提供学生信息的管理功能，
学生信息包括：学号，姓名，性别，学院，专业，年级，班级等，
本软件的功能可以对学生信息，添加，修改，删除，保存，查看，查询，备份等等

第二章	总体设计

2.1 模块化设计总方案
本软件主要包括下面几个模块，1. 程序启动模块，2. 程序退出模块，3. 新增模块，
4. 修改模块，5. 删除模块，6. 保存模块，7. 查看模块， 8. 查询模块，9. 设置模块，
10. 系统设置模块 11. 程序行为记录模块，等等

2.2 模块功能设计
为了实现各个模块的功能，本软件设置了二大类，一结点
分别是文件操作类(file), 界面显示类(ui)，学生信息结点结构(student)
1. 程序启动模块：程序启动时，去获得自身的路径及目录，然后在当前目录下尝试加载学生数据文件，
若加载失败，则创建新的数据文件，然后加载记录设置的INI文件，根据文件中的信息，调整程序，
若加载失败，则使用默认设置
2. 程序退出模块：程序退出时，将主存中的学生数据，写回到辅存中，然后释放主存中的空间，
3. 新增模块：追加主存中的空间，然后将新增的信息保存进来，
4. 修改模块：查找要修改的学生结点地址，然后
5. 删除模块：将该结点的学生数据标记为删除，
6. 保存模块：将学生数据写回到主存中
7. 查看模块：遍历顺序表，显示所有学生信息
8. 查询模块：按学号查询到某个学生的信息
9. 备份模块：将学生数据文件备份到指定的地方
10. 程序行为记录模块：记录程序的操作行为，若发生数据丢失时可查找原因

第三章	详细设计

3.1数据结构设计
考虑到学生信息管理系统可能会有大量的查询等操作，而新增删除操作较少，
所以学生的数据在主存中采用顺序表的结构储存，虽然顺序表方便访问，
但是不方便插入和删除的操作，最坏的时间复杂度可能去到O（N），为了解决的这个缺陷，
在学生信息结点中加了一个删除标记，即删除一个结点并不是把他的空间释放了，
而是改一个标记，逻辑上认为它是被删除的，这样就把删除操作的时间复杂度降到了O（1）。
插入的操作也选择在末尾插入，时间复杂度也降到了O（1），但顺序结构还是有一定缺陷，
比如找不到这么多连续的空间，当数据量过大时，也可采用链式储存结构。

3.2 模块接口设计
文件操作类提供的接口有：复制文件copyfile();， 剪切文件cutfile();，
判断文件存在否 fileexist();，删除文件delelefile();，重命名 newname(); 
行为记录writetext();，获得当前进程路径 getpath(); 获得当前进程目录 getdir();

界面显示类提供的接口有：显示主界面 display(); 等待用户操作 wait();
新增模块 exe_create();  修改模块 exe_update();	 删除模块 exe_remove();
查询模块 exe_find(); 显示模块 exe_show(); 设置模块exe_set();	
备份和还原模块 exe_backup();  设置颜色模块setcolor(); 等等

学生信息结构：包含记录学生信息的所有数据成员，
提供几个输出信息接口
显示某个学生信息 show(); 打印学院 print_xueyuan(); 打印专业 print_major();
打印年级 print_grade();  打印班级 print_class();  打印性别 print_sex();

3.3 模块实现设计

各个模块的实现设计

1. 程序启动模块：启动时，去加载数据文件， 
2. 程序退出模块：退出时，学生的数据先写到一个临时文件里，然后再替换原来的文件，
3. 复制文件用fread 和 fwrite 两个函数，
4. 删除和重命名文件时，用C提供的 remove(); 和 rename(); 两个函数
4. 通过 windows API 提供的函数，来获得当前进程的路径，
5. 用户设置颜色后，将颜色代码及时记录到INI文件中，下次启动程序时，直接在INI文件中提取，
6. 备份学生数据时，通过file类提供的接口，将数据文件复制到用户指定的位置，
7. 还原学生数据时，去用户指定的地方，将数据文件拷贝到当前目录下，然后，再刷新主存中的数据

第四章	调试与测试

4.1 调试过程中的主要问题
	 前期设计软件的时候，没有规划好，之后每想到一个功能就加一点，加了过多以后，
发现程序变得很乱，不利于日后修改维护，改动一个地方，又会影响到别的地方，

关于申请内存的问题，之前是用多少就申请多少，但是程序运行时一直出现内存错误的问题，
后来发现是非法写入了，而非法写入的原因是内存申请不够，之后每次申请的时候，
多申请50个字节，内存错误的问题得到解决。

关于new与malloc的问题，之前用 malloc 去创建一个对象，而对象中又内嵌了别的对象，
malloc 当然没有给它们分配空间，然后导致各种内存错误，所以创建对象一定要用 new，
因为 new 会去执行构造函数，初始化各个对象，而 malloc 只是单纯的分配一块空间。

stu_data.dat 与 EXE 文件在同一个目录下
